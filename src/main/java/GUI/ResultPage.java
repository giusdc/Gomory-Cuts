package GUI;

import com.intellij.uiDesigner.core.GridConstraints;
import com.intellij.uiDesigner.core.GridLayoutManager;
import entities.Result;
import javafx.scene.chart.NumberAxis;
import org.jfree.chart.ChartFactory;
import org.jfree.chart.ChartPanel;
import org.jfree.chart.JFreeChart;
import org.jfree.chart.axis.*;
import org.jfree.chart.plot.ValueMarker;
import org.jfree.chart.plot.XYPlot;
import org.jfree.chart.renderer.xy.XYLineAndShapeRenderer;
import org.jfree.data.category.DefaultCategoryDataset;
import org.jfree.data.xy.DefaultXYDataset;
import org.omg.CORBA.ValueMember;

import javax.swing.*;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;
import java.awt.*;
import java.awt.geom.Rectangle2D;
import java.io.File;
import java.io.IOException;
import java.util.Vector;

public class ResultPage {
    private JPanel resultPageView;
    private JPanel chartPanel;
    private JList timeList;
    private JList pathList;
    private JLabel timeLabel;
    private JLabel pathLabel;

    public ResultPage(Result result, boolean singleCut) {

        JFrame frame = new JFrame("Results");

        frame.setContentPane(resultPageView);

        frame.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);

        frame.pack();

        frame.setVisible(true);

        DefaultXYDataset dataset = new DefaultXYDataset();
        dataset.addSeries("relaxed objective function", result.getData());
        dataset.addSeries("optimal binary solution", result.getOptimal());

        JFreeChart jFreeChart = ChartFactory.createXYLineChart("objective function plot", "n-th gomory cut(s) iteration", "objective function", dataset);

        XYPlot plot = (XYPlot) jFreeChart.getPlot();
        //if (!singleCut) {
            XYLineAndShapeRenderer renderer = new XYLineAndShapeRenderer();
            renderer.setSeriesPaint(0, Color.RED);
            renderer.setSeriesStroke(0, new BasicStroke(2.0f));
            renderer.setSeriesPaint(1, Color.BLACK);
            renderer.setSeriesStroke(1, new BasicStroke(2.0f));
            plot.setRenderer(renderer);
        //}*/
        ValueAxis domainAxis = plot.getDomainAxis();
        TickUnits tickUnits = new TickUnits();
        for (double tick : result.getData()[0]) {
            tickUnits.add(new NumberTickUnit(tick));
        }
        domainAxis.setStandardTickUnits(tickUnits);
        ValueAxis rangeAxis = plot.getRangeAxis();
        double margin = String.valueOf((int) result.getOptimal()[1][0]).length();
        if (margin > 2)
            margin = Math.pow(10, margin - 2);
        else if (margin == 1)
            margin = 1;
        else if (margin == 2)
            margin = 5;

        rangeAxis.setRange(result.getData()[1][0] - margin, result.getOptimal()[1][0] + margin);

        plot.setBackgroundPaint(Color.white);

        chartPanel.setLayout(new BorderLayout());
        ChartPanel CP = new ChartPanel(jFreeChart);
        chartPanel.add(CP, BorderLayout.CENTER);
        chartPanel.validate();

        timeList.setListData(result.getTimes().toArray());

        File folder = new File(result.getPath());
        File[] listOfFiles = folder.listFiles();

        Vector<File> vector = new Vector<>();

        for (File f : listOfFiles) {
            if (f.isFile()) {
                vector.add(f);
            }
        }

        pathList.setListData(vector);

        pathList.addListSelectionListener(new ListSelectionListener() {
            @Override
            public void valueChanged(ListSelectionEvent e) {
                if (!e.getValueIsAdjusting()) {
                    File selectedFile = (File) pathList.getSelectedValue();
                    try {
                        Desktop.getDesktop().open(selectedFile);
                    } catch (IOException e1) {
                        e1.printStackTrace();
                    }
                }
            }
        });
    }

    {
// GUI initializer generated by IntelliJ IDEA GUI Designer
// >>> IMPORTANT!! <<<
// DO NOT EDIT OR ADD ANY CODE HERE!
        $$$setupUI$$$();
    }

    /**
     * Method generated by IntelliJ IDEA GUI Designer
     * >>> IMPORTANT!! <<<
     * DO NOT edit this method OR call it in your code!
     *
     * @noinspection ALL
     */
    private void $$$setupUI$$$() {
        resultPageView = new JPanel();
        resultPageView.setLayout(new GridLayoutManager(2, 1, new Insets(0, 0, 0, 0), -1, -1));
        resultPageView.setPreferredSize(new Dimension(800, 600));
        chartPanel = new JPanel();
        chartPanel.setLayout(new GridLayoutManager(1, 1, new Insets(0, 0, 0, 0), -1, -1));
        resultPageView.add(chartPanel, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, new Dimension(800, 400), null, null, 0, false));
        final JPanel panel1 = new JPanel();
        panel1.setLayout(new GridLayoutManager(1, 2, new Insets(0, 0, 0, 0), -1, -1));
        resultPageView.add(panel1, new GridConstraints(1, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
        final JPanel panel2 = new JPanel();
        panel2.setLayout(new GridLayoutManager(2, 1, new Insets(0, 0, 0, 0), -1, -1));
        panel1.add(panel2, new GridConstraints(0, 1, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
        pathLabel = new JLabel();
        pathLabel.setText("Guroby output file(s)");
        panel2.add(pathLabel, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        final JScrollPane scrollPane1 = new JScrollPane();
        panel2.add(scrollPane1, new GridConstraints(1, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_WANT_GROW, null, null, null, 0, false));
        pathList = new JList();
        scrollPane1.setViewportView(pathList);
        final JPanel panel3 = new JPanel();
        panel3.setLayout(new GridLayoutManager(2, 1, new Insets(0, 0, 0, 0), -1, -1));
        panel1.add(panel3, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
        timeLabel = new JLabel();
        timeLabel.setText("Gomory cut(s) resolution time");
        panel3.add(timeLabel, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        final JScrollPane scrollPane2 = new JScrollPane();
        panel3.add(scrollPane2, new GridConstraints(1, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_WANT_GROW, null, null, null, 0, false));
        timeList = new JList();
        scrollPane2.setViewportView(timeList);
    }

    /**
     * @noinspection ALL
     */
    public JComponent $$$getRootComponent$$$() {
        return resultPageView;
    }
}
